{
    parserClass="com.paulpanther.intellijsqueak.lang.SmalltalkParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Smalltalk"
    psiImplClassSuffix="Impl"
    psiPackage="com.paulpanther.intellijsqueak.lang"
    psiImplPackage="com.paulpanther.intellijsqueak.lang.impl"

    elementTypeHolderClass="com.paulpanther.intellijsqueak.lang.SmalltalkTypes"
    elementTypeClass="com.paulpanther.intellijsqueak.lang.SmalltalkElementType"
    tokenTypeClass="com.paulpanther.intellijsqueak.lang.SmalltalkTokenType"

    psiImplUtilClass="com.paulpanther.intellijsqueak.lang.SmalltalkPsiImplUtil"

    extends(".*statement")=statement
      tokens=[
        IDENTIFIER='regexp:[a-zA-Z_]\w*'
        NUMBER='regexp:\d+'
        BLOCK_ARGUMENT='regexp::[a-zA-Z_]+'
        STRING="regexp:'[^']*'"
        BINARY_OPERATOR="regexp:[*+\\\-/~<>@=,%&?!]+"
        COMMENT='regexp:"[^"]*"'

        STATEMENT_SEPERATOR='.'
        PARENTHESIS_START='('
        PARENTHESIS_END=')'
        ASSIGNMENT_OPERATOR=':='
        RETURN_OPERATOR='^'
        BLOCK_VARIABLE_SEPERATOR='|'
        BLOCK_START='['
        BLOCK_END=']'
        SYMBOL_START='#'
      ]
}

file ::= method

method ::= selector temporaries? statement_body

private selector ::= unary_selector

unary_selector ::= named_identifier

temporaries ::= BLOCK_VARIABLE_SEPERATOR temporary+ BLOCK_VARIABLE_SEPERATOR

temporary ::= named_identifier

multi_statement ::= statement (STATEMENT_SEPERATOR statement)*

statement ::= expression

expression ::= assignment | primary

parenthesized_expression ::= PARENTHESIS_START expression PARENTHESIS_END

assignment ::= variable ASSIGNMENT_OPERATOR expression

private primary ::= variable
    | parenthesized_expression
    | NUMBER
    | STRING
    | block
    | nil
    | true
    | false
    | self
    | super
    | symbol

variable ::= IDENTIFIER {
    methods=[getReferences]
}

statement_body ::= multi_statement? STATEMENT_SEPERATOR?

block ::= BLOCK_START block_arguments? temporaries? statement_body BLOCK_END

block_arguments ::= block_argument+ BLOCK_VARIABLE_SEPERATOR

block_argument ::= IDENTIFIER {
    mixin="com.paulpanther.intellijsqueak.lang.SmalltalkNamedElementImpl"
    implements="com.paulpanther.intellijsqueak.lang.SmalltalkNamedElement"
    methods=[getName setName getNameIdentifier]
}

named_identifier ::= IDENTIFIER {
    mixin="com.paulpanther.intellijsqueak.lang.SmalltalkNamedElementImpl"
    implements="com.paulpanther.intellijsqueak.lang.SmalltalkNamedElement"
    methods=[getName setName getNameIdentifier]
}
