{
    parserClass="com.paulpanther.intellijsqueak.lang.definition.SmalltalkParser"
    parserUtilClass="com.paulpanther.intellijsqueak.lang.definition.SmalltalkParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Smalltalk"
    psiImplClassSuffix="Impl"
    psiPackage="com.paulpanther.intellijsqueak.lang"
    psiImplPackage="com.paulpanther.intellijsqueak.lang.impl"

    elementTypeHolderClass="com.paulpanther.intellijsqueak.lang.SmalltalkTypes"
    elementTypeClass="com.paulpanther.intellijsqueak.lang.psi.SmalltalkElementType"
    tokenTypeClass="com.paulpanther.intellijsqueak.lang.psi.SmalltalkTokenType"

    psiImplUtilClass="com.paulpanther.intellijsqueak.lang.util.SmalltalkPsiImplUtil"

    extends(".*statement")=statement
      tokens=[
        WHITESPACE='regexp:\s+'

        IDENTIFIER='regexp:[a-zA-Z_]\w*'
        KEYWORD='regexp:[a-zA-Z_]\w*:'
        NUMBER='regexp:\d+'
        BLOCK_ARGUMENT_IDENTIFIER='regexp::[a-zA-Z_]\w*'
        STRING="regexp:'[^']*'"
        CHARACTER="regexp:\$(\s|.)"
        BINARY_OPERATOR="regexp:[*+\\\-/~<>@=,%&?!]+"
        SYMBOL="regexp:#([A-Za-z0-9_:]+|[*+\\\-/~<>@=,%&?!]+)"
        SYMBOL_STRING="regexp:#'[^']*'"
        COMMENT='regexp:"[^"]*"'

        STATEMENT_SEPERATOR='.'
        PARENTHESIS_START='('
        PARENTHESIS_END=')'
        ASSIGNMENT_OPERATOR=':='
        RETURN_OPERATOR='^'
        CASCADE_OPERATOR=';'
        BLOCK_VARIABLE_SEPERATOR='|'
        BLOCK_START='['
        BLOCK_END=']'
        DYN_ARRAY_START='{'
        DYN_ARRAY_END='}'
      ]

      extends(".*expr")=expr
}

file ::= <<isMethod>> method | <<isConsole>> console_line | method

console_line ::= <<eof>> | expr

method ::= selector pragma? temporaries? statement_body

private selector ::= keyword_selector | unary_selector | binary_selector

unary_selector ::= named_identifier
keyword_selector ::= (KEYWORD argument)+
binary_selector ::= BINARY_OPERATOR argument

temporaries ::= BLOCK_VARIABLE_SEPERATOR temporary+ BLOCK_VARIABLE_SEPERATOR

temporary ::= named_identifier
argument ::= named_identifier

multi_statement ::= statement (STATEMENT_SEPERATOR statement)*

statement ::= expr | return

return ::= RETURN_OPERATOR expr

expr ::= unary_message_expr | assignment_expr | keyword_message_expr | binary_message_expr | cascade_expr | primary

unary_message_expr ::= expr unary_message_identifier

unary_message_identifier ::= IDENTIFIER {
    methods=[getReferences]
}

keyword_message_expr ::= expr keyword_part+

keyword_part ::= KEYWORD expr

binary_message_expr ::= expr BINARY_OPERATOR expr

parenthesized_expr ::= PARENTHESIS_START expr PARENTHESIS_END {pin=1}

assignment_expr ::= variable ASSIGNMENT_OPERATOR expr

cascade_expr ::= expr (CASCADE_OPERATOR cascade_send)+

private cascade_send ::= cascade_unary_expr | cascade_binary_expr | cascade_keyword_expr
cascade_unary_expr ::= IDENTIFIER
cascade_binary_expr ::= BINARY_OPERATOR expr
cascade_keyword_expr ::= keyword_part+

pragma ::= '<' (pragma_unary_selector | pragma_keyword_selector) '>'
pragma_unary_selector ::= IDENTIFIER
pragma_keyword_selector ::= KEYWORD primary

private primary ::=
    literal_expr
    | reference_expr
    | parenthesized_expr
    | block_expr
    | array_expr

 array_expr ::=
    dynamic_array
    | byte_array

literal_expr ::= NUMBER
    | STRING
    | nil
    | true
    | false
    | self
    | super
    | CHARACTER
    | symbol_literal

symbol_literal ::= SYMBOL | SYMBOL_STRING

reference_expr ::= variable

variable ::= IDENTIFIER {
    methods=[getReferences]
}

dynamic_array ::= DYN_ARRAY_START (expr (STATEMENT_SEPERATOR expr)* STATEMENT_SEPERATOR?)? DYN_ARRAY_END
byte_array ::= '#[' NUMBER* ']'

statement_body ::= multi_statement? STATEMENT_SEPERATOR?

block_expr ::= BLOCK_START block_arguments? temporaries? statement_body BLOCK_END

block_arguments ::= block_argument+ BLOCK_VARIABLE_SEPERATOR

block_argument ::= BLOCK_ARGUMENT_IDENTIFIER {
    mixin="com.paulpanther.intellijsqueak.lang.psi.SmalltalkNamedElementImpl"
    implements="com.paulpanther.intellijsqueak.lang.psi.SmalltalkNamedElement"
    methods=[getName setName getNameIdentifier]
}

named_identifier ::= IDENTIFIER {
    mixin="com.paulpanther.intellijsqueak.lang.psi.SmalltalkNamedElementImpl"
    implements="com.paulpanther.intellijsqueak.lang.psi.SmalltalkNamedElement"
    methods=[getName setName getNameIdentifier]
}
